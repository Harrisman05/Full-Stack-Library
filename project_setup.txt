https://www.youtube.com/watch?v=qj2oDkvc4dQ&t=741s&ab_channel=WebDevSimplified

1) Run npm init -y to create package.json (-y loads in all default values for the properties)
2) In package.json, change update "main": property to server.js  
3) Run npm i express ejs express-ejs-layouts, this will create a package-lock.json
4) Run npm i --save-dev nodemon (nodemon is dev dependancy because it's not needed for the production bulid
5) Creating scripts for running server:
    - "scripts": {
        "start": "node server.js" -- starts server in production enviroment WITHOUT nodemon
        "devStart": "nodemon server.js" -- auto refresh server everytime a change is made
        "
    }

6) See code in server JS to import express. Create public and views folder
7) Run npm run devStart to initialise a server for development
8) Create models, and routes folder
9) Create index.js in routes folder and create a router for the root. Link this router to the server.js file
10) Create layouts folder within view folder and create a layout.ejs file. This will contain boilerplate HTML which will be the same for all pages in the application (see layout file)
11) Create index.ejs file and render it on the root directory. As app.set('layout', 'layouts/layout'); is set, the layout file will always be used by the server and the body section will change 
12) Install MongoDB and npm i mongoose to be able to easily connect to database in the app
13) Setup mongoose connection in server.js
14) Download dotenv as dev dependancy npm i --save-dev dotenv
15) In server.js create if statement to check if the app is running in development or production environment
16) Deploy app on Railway and input DATABASE_URL enviroment variable and MongoDB Atlas user password into Railway
